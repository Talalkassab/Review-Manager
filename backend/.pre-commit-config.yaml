# Pre-commit hooks for code quality and formatting
# Install with: pip install pre-commit && pre-commit install

repos:
  # Code formatting with black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        exclude: ^(alembic/versions/|migrations/)

  # Import sorting with isort
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--filter-files"]
        exclude: ^(alembic/versions/|migrations/)

  # Linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        args:
          - "--max-line-length=88"
          - "--extend-ignore=E203,W503,E501"
          - "--exclude=alembic/versions/,migrations/"
        additional_dependencies: [flake8-docstrings]

  # Security linting with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", ".", "-f", "json"]
        exclude: ^tests/

  # Remove unused imports
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --expand-star-imports
        exclude: ^(alembic/versions/|migrations/)

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        files: \.(yaml|yml|json|md)$
        exclude: ^(alembic/versions/|migrations/)

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies:
          - types-python-dateutil
          - types-requests
          - types-PyYAML
        exclude: ^(tests/|alembic/versions/|migrations/)
        args: ["--ignore-missing-imports", "--no-strict-optional"]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        files: Dockerfile*

  # Check for merge conflicts
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-merge-conflict
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: trailing-whitespace
        exclude: ^(.*\.md|.*\.txt)$
      - id: end-of-file-fixer
        exclude: ^(alembic/versions/|migrations/)
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: detect-private-key

  # SQL formatting (for migration files)
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 2.3.5
    hooks:
      - id: sqlfluff-lint
        files: \.sql$
        exclude: ^(alembic/versions/|migrations/)
        additional_dependencies: ['sqlfluff-templater-dbt']

  # Python docstring formatting
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        exclude: ^(tests/|alembic/versions/|migrations/)
        args: ["--convention=google", "--add-ignore=D100,D101,D102,D103,D104,D105"]

# Configuration for specific hooks
default_stages: [commit, push]
fail_fast: false

# Custom local hooks
repos:
  - repo: local
    hooks:
      # Custom test runner
      - id: pytest-fast
        name: Fast Test Suite
        entry: pytest -x --tb=short tests/unit/
        language: system
        types: [python]
        pass_filenames: false
        stages: [commit]

      # Security scan for secrets
      - id: detect-secrets
        name: Detect Secrets
        entry: python scripts/detect_secrets.py
        language: system
        types: [python]
        pass_filenames: false
        stages: [commit]

      # Database migration check
      - id: alembic-check
        name: Check Database Migrations
        entry: python scripts/check_migrations.py
        language: system
        files: ^(alembic/|app/models/)
        pass_filenames: false
        stages: [commit]

      # API schema validation
      - id: openapi-validation
        name: Validate OpenAPI Schema
        entry: python scripts/validate_openapi.py
        language: system
        files: ^(app/api/|app/schemas/)
        pass_filenames: false
        stages: [push]