# Optimized Dockerfile for Railway deployment
# Resolves crewai-tools, Pillow, cryptography conflicts

FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies required for cryptography, Pillow, and crewai-tools
RUN apt-get update && apt-get install -y \
    # Build dependencies
    gcc \
    g++ \
    make \
    # PostgreSQL client dependencies
    libpq-dev \
    # Cryptography dependencies
    libffi-dev \
    libssl-dev \
    # Pillow dependencies  
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libopenjp2-7-dev \
    zlib1g-dev \
    # Additional system tools
    curl \
    git \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Upgrade pip and install wheel for better package building
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY requirements.txt .

# Install Python packages with specific strategies for problematic packages
RUN pip install --no-cache-dir \
    # Install cryptography first to avoid conflicts
    cryptography==41.0.7 \
    # Install Pillow with system libraries
    Pillow==10.4.0 \
    # Install core packages before crewai
    && pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    sqlalchemy==2.0.23 \
    # Install remaining packages
    && pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p logs uploads temp

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser
RUN chown -R appuser:appuser /app
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Expose port (Railway will set PORT env var)
EXPOSE ${PORT:-8000}

# Startup script that handles migrations and app startup
CMD ["sh", "-c", "echo 'Starting Railway deployment...' && \
    echo 'Running database migrations...' && \
    alembic upgrade head || echo 'Migration failed or not needed' && \
    echo 'Starting FastAPI application...' && \
    exec uvicorn app.main:app --host 0.0.0.0 --port ${PORT:-8000} --workers 1"]