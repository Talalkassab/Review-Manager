version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: restaurant_ai_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-restaurant_ai}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - restaurant_ai_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: restaurant_ai_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - restaurant_ai_network

  # FastAPI Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
    container_name: restaurant_ai_backend
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-restaurant_ai}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Application
      APP_NAME: "Restaurant AI Assistant"
      APP_VERSION: "1.0.0"
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      HOST: "0.0.0.0"
      PORT: 8000
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}
      
      # OpenRouter AI
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      PRIMARY_MODEL_ARABIC: ${PRIMARY_MODEL_ARABIC:-anthropic/claude-3.5-haiku}
      FALLBACK_MODEL_ENGLISH: ${FALLBACK_MODEL_ENGLISH:-openai/gpt-4o-mini}
      
      # WhatsApp Business API
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_BUSINESS_ACCOUNT_ID: ${WHATSAPP_BUSINESS_ACCOUNT_ID}
      WHATSAPP_WEBHOOK_VERIFY_TOKEN: ${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # CORS
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
    
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    networks:
      - restaurant_ai_network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: restaurant_ai_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl-certs:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - restaurant_ai_network
    profiles:
      - nginx

  # Celery Worker for background tasks (optional)
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restaurant_ai_celery_worker
    command: celery -A app.worker.celery_app worker --loglevel=info
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-restaurant_ai}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - restaurant_ai_network
    profiles:
      - celery

  # Celery Beat for scheduled tasks (optional)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: restaurant_ai_celery_beat
    command: celery -A app.worker.celery_app beat --loglevel=info
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-restaurant_ai}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - restaurant_ai_network
    profiles:
      - celery

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  restaurant_ai_network:
    driver: bridge