name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Security

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load Cached Dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install Project
      run: poetry install --no-interaction

    - name: Run Pre-commit Hooks
      run: |
        poetry run pre-commit install
        poetry run pre-commit run --all-files

    - name: Security Scan with Bandit
      run: poetry run bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Unit and Integration Tests
  test-suite:
    runs-on: ubuntu-latest
    name: Test Suite
    needs: quality-checks

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_whatsapp_agent
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load Cached Dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install Project
      run: poetry install --no-interaction

    - name: Set up Test Environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        echo "ENVIRONMENT=testing" >> .env.test

    - name: Run Database Migrations
      run: poetry run alembic upgrade head
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent

    - name: Run Unit Tests
      run: poetry run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent
        REDIS_URL: redis://localhost:6379/0

    - name: Run Integration Tests
      run: poetry run pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent
        REDIS_URL: redis://localhost:6379/0

    - name: Run E2E Tests
      run: poetry run pytest tests/e2e/ -v --cov=app --cov-append --cov-report=xml --cov-report=html
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent
        REDIS_URL: redis://localhost:6379/0

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml

  # Performance and Load Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: test-suite
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_whatsapp_agent
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install Dependencies
      run: poetry install --no-interaction

    - name: Set up Performance Test Environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent" >> .env.test

    - name: Run Database Migrations
      run: poetry run alembic upgrade head
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent

    - name: Load Test Data
      run: poetry run python scripts/load_test_data.py
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent

    - name: Run Performance Tests
      run: poetry run pytest tests/performance/ -v --benchmark-json=benchmark.json
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_whatsapp_agent

    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # Docker Build and Security Scan
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Security Scan
    needs: quality-checks

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: whatsapp-agent:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'whatsapp-agent:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # API Documentation and Contract Testing
  api-docs:
    runs-on: ubuntu-latest
    name: API Documentation & Contract Tests
    needs: test-suite

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}

    - name: Install Dependencies
      run: poetry install --no-interaction

    - name: Generate OpenAPI Schema
      run: poetry run python scripts/generate_openapi.py

    - name: Validate API Schema
      run: poetry run python scripts/validate_openapi.py

    - name: Generate API Documentation
      run: |
        mkdir -p docs/api
        poetry run python scripts/generate_api_docs.py

    - name: Upload API Documentation
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation
        path: docs/api/

  # Deployment Preparation
  deployment-prep:
    runs-on: ubuntu-latest
    name: Deployment Preparation
    needs: [test-suite, docker-build, api-docs]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/whatsapp-agent:latest
          ${{ secrets.DOCKER_REGISTRY }}/whatsapp-agent:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create Deployment Package
      run: |
        mkdir -p deployment/
        cp docker-compose.yml deployment/
        cp -r k8s/ deployment/ || true
        cp .env.example deployment/.env.template

    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/

  # Notification on Success/Failure
  notify:
    runs-on: ubuntu-latest
    name: Notification
    needs: [quality-checks, test-suite, docker-build, api-docs]
    if: always()

    steps:
    - name: Notify Success
      if: ${{ needs.quality-checks.result == 'success' && needs.test-suite.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"

    - name: Notify Failure
      if: ${{ needs.quality-checks.result == 'failure' || needs.test-suite.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ CI pipeline failed. Please check the logs."
        exit 1